#!/usr/bin/python
# "Renshu-cho gyoretsu" game by Kurashov A.K. (Programming) and Kostyukov D.A. (Idea), version 0.3
# Task of game - clear entire field by pairs of neighbour numbers, which must be or equal, or their sum must be equal 10
# 2013, licensed under GNU GPLv3

from tkinter import *
import math
import random
import time

matrix_start_data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9]
mtxbuttons = []
previous_cell_marked_flag = 0
previous_cell_id = 0
first_free_cell_id = 27
classic_mode_flag = 1

root=Tk()
root.title('Renshu-cho gyoretsu')
root.geometry('200x540+0+0')
random.seed(time.time())

def reinit_game():
 global first_free_cell_id
 first_free_cell_id = 27
 if classic_mode_flag == 1:
  for i_button_id in range(9018):
   if i_button_id < 27:
    mtxbuttons[i_button_id]["text"] = matrix_start_data[i_button_id]
   else:
    mtxbuttons[i_button_id]["text"] = " "
 else:
  for i_button_id in range(9018):
   if i_button_id < 27:
    mtxbuttons[i_button_id]["text"] = random.randint(1,9)
   else:
    mtxbuttons[i_button_id]["text"] = " "

def do_switch_mode():
 global classic_mode_flag
 classic_mode_flag = 1 - classic_mode_flag
 if classic_mode_flag == 1:
  label_mode_indicator["text"] = "Mode: classic"
 else:
  label_mode_indicator["text"] = "Mode: random"
 reinit_game()


def white_flag_proc():
 global first_free_cell_id
 for i_button_id in range(first_free_cell_id):
  if mtxbuttons[i_button_id]["text"] != " ":
   mtxbuttons[first_free_cell_id]["text"] = mtxbuttons[i_button_id]["text"]
   first_free_cell_id += 1
   # start check of game over
   if first_free_cell_id > 9017:
    rggowin = Toplevel()
    rggowin.title('Renshu-cho gyoretsu :: Game over...')
    rggowin.geometry('180x64+0+0')
    rggo_label = Label(rggowin, text="Game over...")
    rggo_label.place(x=0, y=0, width=180, height=32)
    rggo_button = Button(rggowin, bg="light gray", fg="black", text="New game", command=reinit_game)
    rggo_button.place(x=45, y=34, width=90, height=25)
    break
    # end check
    

def check_space(i_cell_id_0, i_cell_id_1):
 space_exists_flag = 1
 if i_cell_id_0%9 == i_cell_id_1%9:
  if math.floor(i_cell_id_0/9) < math.floor(i_cell_id_1/9):
   min_y = math.floor(i_cell_id_0/9)
   max_y = math.floor(i_cell_id_1/9)
  elif math.floor(i_cell_id_0/9) > math.floor(i_cell_id_1/9):
   min_y = math.floor(i_cell_id_1/9)
   max_y = math.floor(i_cell_id_0/9)
  else:
   return 0
  for i_cell_y in range(min_y+1, max_y):
   if mtxbuttons[i_cell_y*9+i_cell_id_0%9]["text"] != " ":
    space_exists_flag = 0
  return space_exists_flag
 if math.floor(i_cell_id_0/9) == math.floor(i_cell_id_1/9):
  if i_cell_id_0%9 < i_cell_id_1%9:
   min_x = i_cell_id_0%9
   max_x = i_cell_id_1%9
  elif  i_cell_id_0%9 > i_cell_id_1%9:
   min_x = i_cell_id_1%9
   max_x = i_cell_id_0%9
  else:
   return 0
  for i_cell_x in range(min_x+1, max_x):
   if mtxbuttons[9*math.floor(i_cell_id_0/9)+i_cell_x]["text"] != " ":
     space_exists_flag = 0
  return space_exists_flag

def clean_empty_rows():
 for i_cell_y in range(math.floor(first_free_cell_id/9)+1):
  row_empty_flag = 1
  for i_cell_x in range(9):
   if  mtxbuttons[9*i_cell_y+i_cell_x]["text"] != " ":
    row_empty_flag = 0
  if row_empty_flag == 1:
   for w_cell_id in range (i_cell_y*9, 9009):
    mtxbuttons[w_cell_id]["text"] = mtxbuttons[w_cell_id+9]["text"]
   for x_cell_id in range (9009, 9018):
    mtxbuttons[x_cell_id]["text"] = " "

def mbp_do(bpress_id):
 global previous_cell_marked_flag
 global previous_cell_id
 if previous_cell_marked_flag == 0:
  previous_cell_id = bpress_id
  mtxbuttons[bpress_id]["fg"] = "red"
  previous_cell_marked_flag = 1
 else:
  mtxbuttons[previous_cell_id]["fg"] = "black"
  # start main game logic
  if mtxbuttons[previous_cell_id]["text"] != " " and mtxbuttons[bpress_id]["text"] != " ":
   cell_value_0 = int(mtxbuttons[previous_cell_id]["text"])
   cell_value_1 = int(mtxbuttons[bpress_id]["text"])
   if (cell_value_0 == cell_value_1) or (cell_value_0 + cell_value_1 == 10):
    if (math.sqrt(pow(previous_cell_id%9 - bpress_id%9,2) + pow(math.floor(previous_cell_id/9) - math.floor(bpress_id/9),2)) == 1) or check_space(previous_cell_id, bpress_id):
     mtxbuttons[previous_cell_id]["text"] = " "
     mtxbuttons[bpress_id]["text"] = " "
     # check if we are win
     win_flag = 1
     for i_button_id in range(9018):
      if mtxbuttons[i_button_id]["text"] != " ":
       win_flag = 0
     if win_flag == 1:
      rgwinwin = Toplevel()
      rgwinwin.title('Renshu-cho gyoretsu :: You are win!')
      rgwinwin.geometry('180x64+0+0')
      rgwin_label = Label(rgwinwin, text="Win!")
      rgwin_label.place(x=0, y=0, width=180, height=32)
      rgwin_button = Button(rgwinwin, bg="light gray", fg="black", text="New game", command=reinit_game)
      rgwin_button.place(x=45, y=34, width=90, height=25)
     # end check
     # end main game logic
  clean_empty_rows()
  previous_cell_marked_flag = 0

mtxcanvas = Canvas(root, width=200, height=480)
mtxscrollbar = Scrollbar(mtxcanvas, orient="vertical", command=mtxcanvas.yview)
mtxscrollbar.place(x=180, y=0, width=20, height=480)
mtxcanvas.place(x=0, y=0)

button_white_flag=Button(bg="light gray", fg="black", text="White flag", command=white_flag_proc)
button_white_flag.place(x=0, y=500, width=180, height=20)
label_mode_indicator=Label(bg="light gray", fg="black", text="Mode: classic")
label_mode_indicator.place(x=0, y=520, width=200, height=20)

for button_id in range(9018):
 mtxbuttons.append(Button(root, bg="light gray", fg="black", command=lambda x=button_id:mbp_do(x)))
 mtxcanvas.create_window(20*(button_id%9), 20*math.floor(button_id/9), window=mtxbuttons[button_id], width=20, height=20, anchor="nw")

mtxcanvas.config(scrollregion=(0,0,180,20040), yscrollcommand=mtxscrollbar.set)
root.bind('<Shift-Alt-KeyPress-M>', lambda event : do_switch_mode())
reinit_game()

root.mainloop()
